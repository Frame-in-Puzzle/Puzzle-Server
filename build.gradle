plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" //querydsl
	id "io.franzbecker.gradle-lombok" version "3.0.0"
	id 'jacoco'
}

group = 'com.server'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// *** starter *** //
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // data jpa
	implementation 'org.springframework.boot:spring-boot-starter-security' // security
	implementation 'org.springframework.boot:spring-boot-starter-web' // web
	implementation 'org.springframework.boot:spring-boot-starter-validation' // validation

	// *** lombok *** //
	compile 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// *** h2 *** //
	runtimeOnly 'com.h2database:h2'

	// *** mariadb *** //
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	compile group: 'org.mariadb.jdbc', name: 'mariadb-java-client'

	// *** test ** //
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// *** swagger *** //
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'

	// *** QueryDsl *** //
	implementation 'com.querydsl:querydsl-jpa'

	// *** Oauth2 *** //
	implementation 'org.springframework.boot:spring-boot-configuration-processor:2.6.2'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// *** JsonWebToken *** //
	implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.1'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.1'

	// *** AWS *** ///
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

}

test {
	// jacoco 사용 선언
	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/${name}.exec")
		output = JacocoTaskExtension.Output.FILE
	}
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

// ============== jacoco =============== //
jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
	}

	// 테스트 커버리지를 제외하는 경로들 ( 초반에는 controller, service 로직에만 집중 )
	afterEvaluate {
		classDirectories.from = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/exception/**'
					,'**/dto/**'
					,'**/repository/**'
					,'**/config/**'
					,'**/health_check/**'
					,'**/Puzzle/PuzzleApplication*'
					,'**/Puzzle/**/Q*'
					,'**/Puzzle/global/**'
			])
		})
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

// 테스트 커버리지 체크 단위 설정 ( 빌드 성공 조건 )
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 룰 적용
			element = 'BUNDLE' // Bundle(패키지) 단위

			limit {
				counter = 'INSTRUCTION' // 커버리지 측정의 최소 단위를 Java 바이트코드 명령 수로 지정 ( Missed Instructions 가 50퍼센트 이상일때 )
				value = 'COVEREDRATIO' // 커버된 개수
				minimum = 0.50 // 50퍼센트 이상일시
			}
		}
	}
}

// ====================================== //

// ============== querydsl =============== //
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
// ====================================== //